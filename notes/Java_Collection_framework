FrameWork :- A frameWork is a set of classes and interfaces which provide
a ready-made architecture.
Methods of Collection FrameWork:-
void add(Object);
void addAll(Collection c);
clear();
contains(Object);
ContainsAll(Collection c);
equals(Object);
hashCode(); :- used to return the hash code value of the object.
isEmpty();
iterator();
max();
parallelStream();:- This method returns a parallel stream with this collection
as its source.
remove(Object);
removeAll(Collection c);
removelf(Predicate filter); :- remove all the elements that satisfy the condition given.
retainAll(Collection c); :- used to retain only those elements in this collection that contained
in the specified collection.
size(); :- return the number of elements in the collection.
spliterator(); 
stream(); used to return sequential stream with this collection as its source;
toArray(); Used to return an array containing all of the elements in the collection.

List<T> al = new ArrayList<>();
List<T> ll = new LinkedList<>();
List<T> v = new Vector<>();

LinkedList<Integer> ll = new LinkedList<Integer>();
for(int i=0;i<5;i++){
    ll.add(i);
}
ll.remove(3); //remove at index 3.

Vector<Integer> vec = new Vector<Integer>();

Note :- Althogh vector and ArrayList are same the only difference is that
Vector is synchronized and Array is non-synchronized.


Stack<String> stk = new Stack<String>();
stk.push("fjgsf);
Iterator<String> itr = stk.iterator();
while(itr.hasNext()){
    System.out.println(itr.next() + " ");
}

Both Vector and Stack are thread safe so slow.
ArrayDeque can be used when thread safety is not a concern.

Deque<Integer> dq = new ArrayDeque<Integer>(10);
dq.addFirst(598);
dq.addLast(40);

Queue<T> pq = new PriorityQueue<>();
Queue<T> ad = new ArrayDeque<>();

pq.add(4093);
pq.add(378);
pq.peek();

Comparator Interface :- This interface is used to order the objects of user defined classes.
public int compare(Object o1,Object o2);

public void sort(List l,ComparatorClass c);

class sortbyroll implements Comparator<Object>{
    public int compare(Student a,Student b){
        return a.rollno-b.rollno;
    }
}

Collections.sort(arr,new sortbyroll());

static class customSortingAlgo implements Comparator<Student>{
    public int compare(Student s1,Student s2){
        int NameCompare = s1.getName().compareTo(s2.getName());
        int ageCompare = s2.getAge().compareTo(s2.getAge());

        if(NameCompare==0){
            return ageCompare
        }else{
            return NameCompare;
        }
    }
}
--------------------------------------------------------------------
Set Interface :- A set is unordered collection of Objects.
No duplicates allowed.
Set<T> hs = new HashSet<>();
Set<T> lhs = new LinkedHashSet<>();
Set<T> ts = new TreeSet<>();

HashSet :- HashSet class is an inherent implementation of the hash table
data structure. Order of insertion isn't followed as objects are inserted
based on their hashcode.
    HashSet<String> hs = new HashSet<String>();
    Iterator itr = hs.iterator();
    while(itr.hasNext()){
        System.out.println(itr.next());
    }

LinkedHashSet :- LinkedHashSet uses doubly linked list to store the data and retains
the ordering of the elements.


SortedSet :- 
SortedSet<T> ss = new TreeSet<>();
TreeSet :- Tree Set class uses a tree storage. The ordering of the elements is maintained by
their natural ordering weather or not an explicit comparator is provided.


Map Interface:-
Map<T> hm = new HashMap<>();
Map<T> tm = new TreeMap<>();
Map<T> sm = new SortedMap<>();

HashMap<Integer, String> hm = new HashMap<Integer,String>();
hm.put(1,"geeks");
hm.put(2,"for");

hm.get(1);
for(Map.Entry<Integer,String> e : hm.entry()){
    System.out.println(e.getKey()+" "+e.getValue());
}