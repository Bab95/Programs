-----------JAVA-----------
Enum:-
1.Enums are used when we know all the values
at compile time.
2.Enum declaration can be done outsied of the
class as well.

enum Color{
    RED,GREEN,BLUE;
}
public class test{
    public static void main(String[] args){
        Color c1 = Color.RED;
        System.out.println(c1);
    }
}

Decision Making:-
1.//for each loop.
for(int num : numbers){
    if(num>maxSoFar){
        maxSoFar = num;
    }
}

Widening primitive data types:-
System.out.print("Y"+"O");
System.out.println('L'+'O');
Output:- YO155
when printed in single quotes it is converted into int and then added.

Widening or Automatic Conversion:-
Bytes->Short->int->Long->Float->Double
Small data to big data conversion happens automatically

But from bigger data type we have to explicitly convert back to smaller data types.
double d = 100.04;
long l = (long)d;

Labels:- Java doesn't support goto but it supports label but that only within loops

outer:
    for(int i=0;i<10;++i){
        for(int j=0;j<10;++j){
            if(j==1){
                // this will go out of both loops.
                break outer;
            }
        }
    }


continue in Java:-
outer:
    for(int i=0;i<10;++i){
        for(int j=0;j<10;++j){
            if(j==1){
                // this will go out of both loops.
                continue outer;
            }
        }
    }

null in Java:-
null is neither an object nor a type but it can be typecasted
Double dbl = (Double)null;
String str = (String)null;

AutoBoxing and unboxing:-During autoboxing and unboxing operations compiler throws
NullpointerException error if a null value is assigned to primitive boxed data type.
Integer i = null;
int a = i;

Instanceof operator:-The Java instanceof operator is used to test wheather the object is instance
of the specified type.
At runtime the result of instanceof operator is true if the value of the expression is not null.

Integer i = null;
Integer j = 10;
System.out.println(i instanceof Integer);
System.out.println(j instanceof Integer);
output:-
false
true

Static and non-static methods:-
We cannot call a non-static method on a reference variable with null value, it will throw NullPointerException but static methods
can be called with null values. Since static methods are bonded using static binding they won't throw NullPointerException.
Test obj = null;
obj.staticMethod();
obj.nonStaticMethod();

Comparison and not equal operator are allowed with null in Java.

Currying Fucntions:-
Fucntion currying is a concept of breaking a function with many argumnets into many functions with single argument in such a way that output is same.
addThreeNumbersFunctions(a,b,c){
    return (a+b+c);
}

addNumberOne(a){
    return addNumberTwo(b){
        return addNumberThree(c){
            return (a+b+c);
        }
    }
}


Function<Integer,Function<Integer,Integer> > curryAdder = u->v->u+v;

System.out.println("add 2,3"+curryAdder.apply(2).apply(3));

Function<Integer,Function<Integer,Integer> > triadder = u->w->v->u+w+v;

-------------Java OOPS----------------
In Java all the elements are allocated on the heap dynamically.
When only declaring a variable no memory is allocated. To allocate memory to an object
new() must be used.

Test t = new Test();
t.show();

Ways of creating objects in Java
1.Using new
2.Using New Instance

try{
    Class cls = Class.forName("NewInstanceExample");
    NewInstanceExample obj = (NewInstanceExample)cls.newInstance();
}catch(Exception e){
    e.printStackTrace();
}

3.clone() method:-When clone() is called on any object the JVM actually creates a new object and copies
all the content of the pervious object into it.Creating object using clone doesn't invoke any constructor.

public class CloneExample implements Clonable{
    @Override
    protected Object clone() throws CloneNotSupportedException{
        return super.clone();
    }
    public static void main(String args[]){
        CloneExample obj1 = new CloneExample();
        try{
            CloneExample obj2 = (CloneExample)obj1.clone();
            System.out.println(obj1.name);
        }catch(Exception e){
            e.printStackTrace();
        }
    }
}

4.Deserialize:- Whenever an object is serialized and deserialized JVM creates a separate object.
In deserailize JVM doesn't use any constructor to create the object.
To deserialize we must implement Serializable interface in the class.

class DeserializationExample implements Serializable{
    private String name;
    DeserializationExample(String name){
        this.name = name;
    }
    public static void main(String args[]){
        try{
            DeserializationExample d = new DeserializationExample("someting");
            FileOutputStream f = new FileOutputStream("file.txt);
            ObjectOutputStream oos = new ObjectOutputStream(f);
            oos.writeObject(d);
            oos.close();
            f.close();
        }catch(Exception e){
            e.printStackTrace();
        }
    }
}



class DeserializationExample implements Serializable{
    private String name;
    public static void main(String args[]){
        try{
            DeserializationExample d;
            FileOutputStream f = new FileOutputStream("file.txt");
            ObjectInputStream oos = new ObjectInputStream(f);
            d = (DeserializationExample)oos.readObject();
        }catch(Exception e){
            e.printStackTrace();
        }
        System.out.println(d.name);
    }
}

Swapping two objects in Java:-
Solution is to make wrapper class that contains references of objects.We can
swap objects by swapping refernces of wrapper class.
Class carWrapper{
    Car c;
    carWrapper(Car c){
        this.c = c;
    }
}
public static void swap(carWrapper cw1,carWrapper cw2){
    Car tmp = cw1.c;
    cw1.c = cw2.c;
    cw2.c = tmp;
}

Inheritance:-

class MountainBike extends Bicycle{
    public int seatHeight;
    public MountainBike(int gear,int speed,int startHeight){
        super(gear,speed);
        seatHeight = startHeight;
    }

    public void seatHeight(int newValue){
        seatHeight = newValue;
    }
}

Multiple inheritance:-(Through interfaces):-
Although java doesn't support multiple inheritance but it can be achieved though interfaces.

A subclass inherits all the members from its superclass. Constructors are not members,
so they are not inherited by subclass but the constructor of the superclass can be invoked from subclass.

A subclass doesn't inherit the private members of parent class.However if super class have public methods for
accessing its private fields, these can also be used by the subclass.

StringBuilder Class:- StringBuilder represents mutable sequence of characters.
StringBuilder and StringBuffer classes differ on the basis of synchronization.StringBuffer class provides synchronization.
Constructors:-
  StringBuilder() ->16 capacity
  StringBuilder(int capacity);
  StringBuilder(charSequence seq);
  StringBuilder(String str);

Methods:-
  char charAt(int index);
  StringBuilder append(X x); ->appends string representation of x.
  StringBuilder deleteCharAt(int index);
  void getChars(int srcBegin,intsrcEnd,char[] dst,int dstbegin);



Garbage Collection in Java:-
Programmer is only responsible for making the object eligible for Garbage Collection if no longer required.
An object is said to be eligible for Garbage Collection if it doesn't have any references.
Ways to make object eligible for Garbage Collection.
1.Nullyfying the reference variable
Student s1 = new Student();
s1 = null;

Island of Isolation:-
  Class Test{
    Test t
    public static void main(String args[]){
      Test t1 = new Test();
      Test t2 = new Test();
      Test t3 = new Test();
      t1.t = t2;
      t2.t = t3;
      t3.t = t1;
      t1 = null;
      t2 = null;
      t3 = null;
      /*
      Although at this point 3 objects available but as they are being refered by another object GC won't clean them.
      */
    }
  }


Method of requesting JVM to Run Garbage Collector:- Whenever an object is made eligible for Garbage Collection it
may not be destroyed immediately.

1.By System Class:-
  System.gc();
  gc is a static member of System class.

2.By Runtime class:-
  Runtime r = Runtime.getRuntime();
  Runtime Class has the following methods:-
    freeMemory();
    totalMemory();
    gc();


Finalization:-Just before destroying any object GC always calls finalize() method to perform clean-up activity on the object.
finalize() method is declared in the Object Class
protected void finalize() throws throwable{

}

*>finalize() method can be called just like a normal function but in that case object won't be destroyed.

If finalize() method is called explicitly and any uncaught exception is thrown program will be terminated abnormally.
And in case the GC calls finalize() method and an exception is thrown JVM will simply ignore this exception.

Memory Leak:- Memory leak is a useless object which isn't eligible for GC.

Inner Classes:-
  Without existing one type of object if there is no chance of existing another type of object then Inner classes shall be used.
  eg:-1.Without existing Car Object there are no chances of existing Wheel Object.
  class Car{
    class Wheel{

    }
  }
  eg:-2.Without existing Bank Object there are no chances of existing Account Object.
  class Bank{
    class Account{

    }
  }
  eg:-3.Map is a collection of key value pairs and each key value pair is called entry. without existing Map there
  is no meaning of existance of <key,value>
  interface Map{
    interface Entry{

    }
  }

  RelationShip Between Inner and Outer Class:- It's not the relationship of parent-child.It is has a relationship.
  Static and non-statci Methods of outer class are accessible from the inner class directly.

  Normal Outer Inner class:-
    class Outer{
      class Inner{

      }
      public static void main(String args[]){

      }
    }
    javac outer.java
    java Outer
    java outer$inner   => no such method Error :Main

    Inside Inner class static members can't be declared hence it is not possible to declare main method and hence
    inner class can't be invoked directly from command promt.

    Accessing Inner class code from static area of outer class:-
      class outer{
        class inner{
          public void m1(){
            System.out.println("Inner class method");
          }
        }
        public static void main(String args[]){
          outer o = new outer();
          outer.inner i = new o.new inner();
          i.m1();
        }
      }


  Method Local Inner Class:-
    class Outer{
      void outermethod(){
        System.out.println("inside outer method");
        class Inner{
          void innermethod(){
            System.out.println("Inside inner method");
          }
        }
        Inner y = new Inner();
        y.innermethod();
      }
    }


    class Demo{
      public static void main(String args[]){
        outer o = new outer();
        o.outermethod();
      }
    }

  Method local classes can access only final local variables of outer class.

  Static nested inner classes:-They are not technically an inner class. They are more like static member of outer class.
  class outer{
    private static void outerMethod(){

    }
    static class inner{
      public static void main(String args[]){
        outerMethod();
      }
    }
  }


Static Initialization Block:- Used to initialize only static variables.
static initialization block can't be nested.


constructor
class A{
  A(){

  }
  void A(){
    //constructor having a return type
  }
}

Duplicate Constructors are not allowed.
Constructors can not be final,static or abstract.
First Statement in constructor should be super() or this.
If constructor is kept empty it will keep super() by default and if any other statement is
kept it will give compile time error.
